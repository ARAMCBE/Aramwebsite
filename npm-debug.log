0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install' ]
2 info using npm@1.3.14
3 info using node@v0.10.22
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose readDependencies using package.json deps
6 verbose install where, deps [ 'C:\\Aramwebsite',
6 verbose install   [ 'express', 'ejs', 'pg', 'session', 'MD5', 'wait.for' ] ]
7 info preinstall application-name@0.0.1
8 verbose readDependencies using package.json deps
9 verbose already installed skipping express@3.4.4 C:\Aramwebsite
10 verbose already installed skipping ejs@* C:\Aramwebsite
11 verbose already installed skipping pg@* C:\Aramwebsite
12 verbose already installed skipping session@* C:\Aramwebsite
13 verbose already installed skipping MD5@* C:\Aramwebsite
14 verbose cache add [ 'wait.for@*', null ]
15 verbose cache add name=undefined spec="wait.for@*" args=["wait.for@*",null]
16 verbose parsed url { protocol: null,
16 verbose parsed url   slashes: null,
16 verbose parsed url   auth: null,
16 verbose parsed url   host: null,
16 verbose parsed url   port: null,
16 verbose parsed url   hostname: null,
16 verbose parsed url   hash: null,
16 verbose parsed url   search: null,
16 verbose parsed url   query: null,
16 verbose parsed url   pathname: 'wait.for@*',
16 verbose parsed url   path: 'wait.for@*',
16 verbose parsed url   href: 'wait.for@*' }
17 verbose cache add name="wait.for" spec="*" args=["wait.for","*"]
18 verbose parsed url { protocol: null,
18 verbose parsed url   slashes: null,
18 verbose parsed url   auth: null,
18 verbose parsed url   host: null,
18 verbose parsed url   port: null,
18 verbose parsed url   hostname: null,
18 verbose parsed url   hash: null,
18 verbose parsed url   search: null,
18 verbose parsed url   query: null,
18 verbose parsed url   pathname: '*',
18 verbose parsed url   path: '*',
18 verbose parsed url   href: '*' }
19 verbose addNamed [ 'wait.for', '*' ]
20 verbose addNamed [ null, '*' ]
21 silly lockFile bb159be7-wait-for wait.for@*
22 verbose lock wait.for@* C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\bb159be7-wait-for.lock
23 silly addNameRange { name: 'wait.for', range: '*', hasData: false }
24 verbose url raw wait.for
25 verbose url resolving [ 'https://registry.npmjs.org/', './wait.for' ]
26 verbose url resolved https://registry.npmjs.org/wait.for
27 info trying registry request attempt 1 at 06:46:51
28 verbose etag "5MQ62594TGMA1HT8IQ40TO4NT"
29 http GET https://registry.npmjs.org/wait.for
30 http 304 https://registry.npmjs.org/wait.for
31 silly registry.get cb [ 304,
31 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
31 silly registry.get     etag: '"5MQ62594TGMA1HT8IQ40TO4NT"',
31 silly registry.get     date: 'Sun, 17 Nov 2013 01:16:55 GMT',
31 silly registry.get     'content-length': '0' } ]
32 verbose etag wait.for from cache
33 silly addNameRange number 2 { name: 'wait.for', range: '*', hasData: true }
34 silly addNameRange versions [ 'wait.for', [ '0.6.0', '0.6.1', '0.6.2', '0.6.3' ] ]
35 verbose addNamed [ 'wait.for', '0.6.3' ]
36 verbose addNamed [ '0.6.3', '0.6.3' ]
37 silly lockFile 86cc524b-wait-for-0-6-3 wait.for@0.6.3
38 verbose lock wait.for@0.6.3 C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\86cc524b-wait-for-0-6-3.lock
39 silly lockFile 86cc524b-wait-for-0-6-3 wait.for@0.6.3
40 silly lockFile 86cc524b-wait-for-0-6-3 wait.for@0.6.3
41 silly lockFile bb159be7-wait-for wait.for@*
42 silly lockFile bb159be7-wait-for wait.for@*
43 silly resolved [ { name: 'wait.for',
43 silly resolved     version: '0.6.3',
43 silly resolved     description: 'Sequential programming for node.js, end of callback hell',
43 silly resolved     author:
43 silly resolved      { name: 'Lucio Tato',
43 silly resolved        email: 'luciotato@gmail.com',
43 silly resolved        url: 'http://github.com/luciotato' },
43 silly resolved     keywords:
43 silly resolved      [ 'fiber',
43 silly resolved        'fibers',
43 silly resolved        'coroutine',
43 silly resolved        'thread',
43 silly resolved        'sync',
43 silly resolved        'async',
43 silly resolved        'parallel',
43 silly resolved        'worker',
43 silly resolved        'future',
43 silly resolved        'promise',
43 silly resolved        'wait',
43 silly resolved        'Wait.for',
43 silly resolved        'callback hell',
43 silly resolved        'pyramid of doom' ],
43 silly resolved     homepage: 'http://github.com/luciotato/waitfor',
43 silly resolved     license: 'Creative Commons, MIT',
43 silly resolved     bugs: { url: 'http://github.com/luciotato/waitfor/issues' },
43 silly resolved     repository: { type: 'git', url: 'git://github.com/luciotato/waitfor.git' },
43 silly resolved     main: 'waitfor.js',
43 silly resolved     engines: { node: '>=0.5.2' },
43 silly resolved     dependencies: { fibers: '>=1.0.1' },
43 silly resolved     scripts: { test: 'node tests' },
43 silly resolved     readme: 'Wait.for\n=======\nSequential programming for node.js, end of callback hell.\n\nSimple, straightforward abstraction over [Fibers](https://github.com/laverdet/node-fibers).\n\nBy using **wait.for**, you can call any nodejs standard async function in sequential/Sync mode, waiting for result data, \nwithout blocking node\'s event loop (thanks to fibers)\n\nA nodejs standard async function is a function in which the last parameter is a callback: function(err,data)\n\nAdvantages:\n* Avoid callback hell / pyramid of doom\n* Simpler, sequential programming when required, without blocking node\'s event loop (thanks to fibers)\n* Simpler, try-catch exception programming. (default callback handler is: if (err) throw err; else return data)\n* You can also launch multiple parallel non-concurrent fibers.\n* No multi-threaded debugging nightmares, only one fiber running at a given time (thanks to fibers)\n* Can use any node-standard async function with callback(err,data) as last parameter.\n* Plays along with node programming style. Write your async functions with callback(err,data), but use them in sequential/SYNC mode when required.\n* Plays along with node cluster. You design for one thread/processor, then scale with cluster on multicores.\n\n--- NEWS ---\n-\nI\'ve developed ***a version based on JavaScript upcoming ES6-Harmony generators***. It\'s not based on node-fibers.\n***Surprisingly***, ES6 based implementation of *wait.for(asyncFn)* is almost a no-op, you can even completely omit it.\n*Warning: Bleeding edge*. Check [Wait.for-ES6] (https://github.com/luciotato/waitfor-ES6/blob/master/README.md#the-funny-thing-is) \n\n\nInstall: \n-\n        npm install wait.for\n\n\nProper Use:\n-\nWait.for proper usage is to launch a fiber to attend a request. Ideally here:\n\n```javascript\nvar server = http.createServer(\n  function(req, res){\n    console.log(\'req!\');\n    wait.launchFiber(handler,req,res); //handle in a fiber\n    // keep node spinning\n  }).listen(8000);\n```\n\nthen,at *function handler(req,res)* and every function you call from there, you\'ll be able to use wait.for(ayncFn...\n\nExamples:\n-\n\nDNS testing, *using pure node.js* (a little of callback hell):\n```javascript\nvar dns = require("dns");\n    \nfunction test(){ \n\tdns.resolve4("google.com", function(err, addresses) {\n\t\tif (err) throw err;\n\t\tfor (var i = 0; i < addresses.length; i++) {\n\t\t\tvar a = addresses[i];\n\t\t\tdns.reverse(a, function (err, data) {\n\t\t\t\tif (err) throw err;\n\t\t\t\tconsole.log("reverse for " + a + ": " + JSON.stringify(data));\n\t\t\t});\n\t\t};\n\t});\n}\n\ntest();\n```\n\n***THE SAME CODE***, using **wait.for** (sequential):\n```javascript\nvar dns = require("dns"), wait=require(\'wait.for\');\n\nfunction test(){\n\tvar addresses = wait.for(dns.resolve4,"google.com");\n\tfor (var i = 0; i < addresses.length; i++) {\n\t\tvar a = addresses[i];\n\t\tconsole.log("reverse for " + a + ": " + JSON.stringify(wait.for(dns.reverse,a)));\n\t}\n}\n\nwait.launchFiber(test); \n```\n\nDatabase example (pseudocode)\n--\n*using pure node.js* (a callback hell):\n```javascript\nvar db = require("some-db-abstraction");\n\nfunction handleWithdrawal(req,res){  \n\ttry {\n\t\tvar amount=req.param("amount");\n\t\tdb.select("* from sessions where session_id=?",req.param("session_id"),function(err,sessiondata) {\n\t\t\tif (err) throw err;\n\t\t\tdb.select("* from accounts where user_id=?",sessiondata.user_ID),function(err,accountdata) {\n\t\t\t\tif (err) throw err;\n\t\t\t\t\tif (accountdata.balance < amount) throw new Error(\'insufficient funds\');\n\t\t\t\t\tdb.execute("withdrawal(?,?)",accountdata.ID,req.param("amount"), function(err,data) {\n\t\t\t\t\t\tif (err) throw err;\n\t\t\t\t\t\tres.write("withdrawal OK, amount: "+ req.param("amount"));\n\t\t\t\t\t\tdb.select("balance from accounts where account_id=?", accountdata.ID,function(err,balance) {\n\t\t\t\t\t\t\tif (err) throw err;\n\t\t\t\t\t\t\tres.end("your current balance is "  + balance.amount);\n\t\t\t\t\t\t});\n    \t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tcatch(err) {\n\t\t\tres.end("Withdrawal error: "  + err.message);\n\t}\n}\n```\nNote: The above code, although it looks like it will catch the exceptions, **it will not**. \nCatching exceptions with callback hell adds a lot of pain, and i\'m not sure if you will have the \'res\' parameter \nto respond to the user. If somebody like to fix this example... be my guest.\n\n\n***THE SAME CODE***, using **wait.for** (sequential logic - sequential programming):\n```javascript\nvar db = require("some-db-abstraction"), wait=require(\'wait.for\');\n\nfunction handleWithdrawal(req,res){  \n\ttry {\n\t\tvar amount=req.param("amount");\n\t\tsessiondata = wait.forMethod(db,"select","* from session where session_id=?",req.param("session_id"));\n\t\taccountdata = wait.forMethod(db,"select","* from accounts where user_id=?",sessiondata.user_ID);\n\t\tif (accountdata.balance < amount) throw new Error(\'insufficient funds\');\n\t\twait.forMethod(db,"execute","withdrawal(?,?)",accountdata.ID,req.param("amount"));\n\t\tres.write("withdrawal OK, amount: "+ req.param("amount"));\n\t\tbalance = wait.forMethod(db,"select","balance from accounts where account_id=?", accountdata.ID);\n\t\tres.end("your current balance is "  + balance.amount);\n\t\t}\n\tcatch(err) {\n\t\tres.end("Withdrawal error: "  + err.message);\n}  \n```\n\n\nNote: Exceptions will be catched as expected.\ndb methods (db.select, db.execute) will be called with this=db\n\n\nWhat if... Fibers and WaitFor were part of node core?\n-\nthen you can deprecate almost half the functions at: http://nodejs.org/api/fs.html\n(clue: the *Sync* versions)\n\nExample:\n--\n\npure node.js:\n```javascript\nvar fs = require("fs");\n\nfs.readFile(\'/etc/passwd\', function (err, data) {\n\tif (err) throw err;\n\tconsole.log(data);\n});\n```\n\n\nusing **wait.for**:\n```javascript\nvar fs = require("fs"), wait=require(\'wait.for\');\n\nconsole.log(wait.for(fs.readFile,\'/etc/passwd\'));\n```\n\n\n\n(see tests.js for more examples)\n\nUsage: \n-\n```javascript\nvar wait=require(\'wait.for\');\n\n// launch a new fiber\nwait.launchFiber(my_seq_function, arg,arg,...)\n\n// fiber\nfunction my_seq_function(arg,arg...){\n    // call async_function(arg1), wait for result, return data\n    var myObj = wait.for(async_function, arg1); \n    // call myObj.querydata(arg1,arg2), wait for result, return data\n    var myObjData = wait.forMethod(myObj,\'queryData\', arg1, arg2);\n    console.log(myObjData.toString());\n}\n```\n\nRoadmap\n--\n\n * Parallel execution, launch one fiber for each array item, waits until all fibers complete execution.\n   * **function wait.parallel.map(arr,fn)** return transformed array;\n   * **function wait.parallel.filter(arr,fn)** return filtered array;\n   * Status: working prototypes in [paralell-tests.js](http://github.com/luciotato/waitfor/blob/master/paralell-tests.js)\n',
43 silly resolved     readmeFilename: 'README.md',
43 silly resolved     _id: 'wait.for@0.6.3',
43 silly resolved     _from: 'wait.for@*' } ]
44 info install wait.for@0.6.3 into C:\Aramwebsite
45 info installOne wait.for@0.6.3
46 info C:\Aramwebsite\node_modules\wait.for unbuild
47 verbose tar unpack C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\wait.for\0.6.3\package.tgz
48 silly lockFile 52b35ae1-ramwebsite-node-modules-wait-for tar://C:\Aramwebsite\node_modules\wait.for
49 verbose lock tar://C:\Aramwebsite\node_modules\wait.for C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\52b35ae1-ramwebsite-node-modules-wait-for.lock
50 silly lockFile 859bd34a-cache-wait-for-0-6-3-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\wait.for\0.6.3\package.tgz
51 verbose lock tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\wait.for\0.6.3\package.tgz C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\859bd34a-cache-wait-for-0-6-3-package-tgz.lock
52 silly gunzTarPerm modes [ '755', '644' ]
53 silly gunzTarPerm extractEntry package.json
54 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
55 silly gunzTarPerm extractEntry .npmignore
56 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
57 silly gunzTarPerm extractEntry README.md
58 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
59 silly gunzTarPerm extractEntry LICENSE
60 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
61 silly gunzTarPerm extractEntry paralell-tests.js
62 silly gunzTarPerm modified mode [ 'paralell-tests.js', 438, 420 ]
63 silly gunzTarPerm extractEntry tests.js
64 silly gunzTarPerm modified mode [ 'tests.js', 438, 420 ]
65 silly gunzTarPerm extractEntry waitfor-demo.js
66 silly gunzTarPerm modified mode [ 'waitfor-demo.js', 438, 420 ]
67 silly gunzTarPerm extractEntry waitfor.js
68 silly gunzTarPerm modified mode [ 'waitfor.js', 438, 420 ]
69 silly lockFile 52b35ae1-ramwebsite-node-modules-wait-for tar://C:\Aramwebsite\node_modules\wait.for
70 silly lockFile 52b35ae1-ramwebsite-node-modules-wait-for tar://C:\Aramwebsite\node_modules\wait.for
71 silly lockFile 859bd34a-cache-wait-for-0-6-3-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\wait.for\0.6.3\package.tgz
72 silly lockFile 859bd34a-cache-wait-for-0-6-3-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\wait.for\0.6.3\package.tgz
73 info preinstall wait.for@0.6.3
74 verbose readDependencies using package.json deps
75 verbose readDependencies using package.json deps
76 verbose cache add [ 'fibers@>=1.0.1', null ]
77 verbose cache add name=undefined spec="fibers@>=1.0.1" args=["fibers@>=1.0.1",null]
78 verbose parsed url { protocol: null,
78 verbose parsed url   slashes: null,
78 verbose parsed url   auth: null,
78 verbose parsed url   host: null,
78 verbose parsed url   port: null,
78 verbose parsed url   hostname: null,
78 verbose parsed url   hash: null,
78 verbose parsed url   search: null,
78 verbose parsed url   query: null,
78 verbose parsed url   pathname: 'fibers@%3E=1.0.1',
78 verbose parsed url   path: 'fibers@%3E=1.0.1',
78 verbose parsed url   href: 'fibers@%3E=1.0.1' }
79 verbose cache add name="fibers" spec=">=1.0.1" args=["fibers",">=1.0.1"]
80 verbose parsed url { protocol: null,
80 verbose parsed url   slashes: null,
80 verbose parsed url   auth: null,
80 verbose parsed url   host: null,
80 verbose parsed url   port: null,
80 verbose parsed url   hostname: null,
80 verbose parsed url   hash: null,
80 verbose parsed url   search: null,
80 verbose parsed url   query: null,
80 verbose parsed url   pathname: '%3E=1.0.1',
80 verbose parsed url   path: '%3E=1.0.1',
80 verbose parsed url   href: '%3E=1.0.1' }
81 verbose addNamed [ 'fibers', '>=1.0.1' ]
82 verbose addNamed [ null, '>=1.0.1' ]
83 silly lockFile 142c5e10-fibers-1-0-1 fibers@>=1.0.1
84 verbose lock fibers@>=1.0.1 C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\142c5e10-fibers-1-0-1.lock
85 silly addNameRange { name: 'fibers', range: '>=1.0.1', hasData: false }
86 verbose url raw fibers
87 verbose url resolving [ 'https://registry.npmjs.org/', './fibers' ]
88 verbose url resolved https://registry.npmjs.org/fibers
89 info trying registry request attempt 1 at 06:46:54
90 verbose etag "3EJ2JEPDWSCTBHONP4120HDC1"
91 http GET https://registry.npmjs.org/fibers
92 http 304 https://registry.npmjs.org/fibers
93 silly registry.get cb [ 304,
93 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
93 silly registry.get     etag: '"3EJ2JEPDWSCTBHONP4120HDC1"',
93 silly registry.get     date: 'Sun, 17 Nov 2013 01:16:57 GMT',
93 silly registry.get     'content-length': '0' } ]
94 verbose etag fibers from cache
95 silly addNameRange number 2 { name: 'fibers', range: '>=1.0.1', hasData: true }
96 silly addNameRange versions [ 'fibers',
96 silly addNameRange   [ '0.1.0',
96 silly addNameRange     '0.1.1',
96 silly addNameRange     '0.1.2',
96 silly addNameRange     '0.1.3',
96 silly addNameRange     '0.1.4',
96 silly addNameRange     '0.1.6',
96 silly addNameRange     '0.1.7',
96 silly addNameRange     '0.1.8',
96 silly addNameRange     '0.2.0',
96 silly addNameRange     '0.2.1',
96 silly addNameRange     '0.2.2',
96 silly addNameRange     '0.2.3',
96 silly addNameRange     '0.2.4',
96 silly addNameRange     '0.2.5',
96 silly addNameRange     '0.2.6',
96 silly addNameRange     '0.5.0',
96 silly addNameRange     '0.6.0',
96 silly addNameRange     '0.5.1',
96 silly addNameRange     '0.6.1',
96 silly addNameRange     '0.6.2',
96 silly addNameRange     '0.6.3',
96 silly addNameRange     '0.6.4',
96 silly addNameRange     '0.6.5',
96 silly addNameRange     '0.6.6',
96 silly addNameRange     '0.6.7',
96 silly addNameRange     '0.6.8',
96 silly addNameRange     '0.6.9',
96 silly addNameRange     '1.0.0',
96 silly addNameRange     '1.0.1' ] ]
97 verbose addNamed [ 'fibers', '1.0.1' ]
98 verbose addNamed [ '1.0.1', '1.0.1' ]
99 silly lockFile c99c8b50-fibers-1-0-1 fibers@1.0.1
100 verbose lock fibers@1.0.1 C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\c99c8b50-fibers-1-0-1.lock
101 silly lockFile c99c8b50-fibers-1-0-1 fibers@1.0.1
102 silly lockFile c99c8b50-fibers-1-0-1 fibers@1.0.1
103 silly lockFile 142c5e10-fibers-1-0-1 fibers@>=1.0.1
104 silly lockFile 142c5e10-fibers-1-0-1 fibers@>=1.0.1
105 silly resolved [ { name: 'fibers',
105 silly resolved     version: '1.0.1',
105 silly resolved     description: 'Cooperative multi-tasking for Javascript',
105 silly resolved     keywords:
105 silly resolved      [ 'fiber',
105 silly resolved        'fibers',
105 silly resolved        'coroutine',
105 silly resolved        'thread',
105 silly resolved        'async',
105 silly resolved        'parallel',
105 silly resolved        'worker',
105 silly resolved        'future',
105 silly resolved        'promise' ],
105 silly resolved     homepage: 'https://github.com/laverdet/node-fibers',
105 silly resolved     author:
105 silly resolved      { name: 'Marcel Laverdet',
105 silly resolved        email: 'marcel@laverdet.com',
105 silly resolved        url: 'https://github.com/laverdet/' },
105 silly resolved     main: 'fibers',
105 silly resolved     scripts: { install: 'node ./build.js', test: 'node ./test.js' },
105 silly resolved     repository:
105 silly resolved      { type: 'git',
105 silly resolved        url: 'git://github.com/laverdet/node-fibers.git' },
105 silly resolved     engines: { node: '>=0.5.2' },
105 silly resolved     readme: 'fibers(1) -- Fiber support for v8 and Node\n==========================================\n\nINSTALLING\n----------\n\n### via npm\n* `npm install fibers`\n* You\'re done!\n\n### from source\n* `git clone git://github.com/laverdet/node-fibers.git`\n* `cd node-fibers`\n* `npm install`\n\nNote: node-fibers uses [node-gyp](https://github.com/TooTallNate/node-gyp) for\nbuilding. To manually invoke the build process, you can use `node-gyp rebuild`.\nThis will put the compiled extension in `build/Release/fibers.node`. However,\nwhen you do `require(\'fibers\')`, it will expect the module to be in, for\nexample, `bin/linux-x64-v8-3.11/fibers.node`. You can manually put the module\nhere every time you build, or you can use the included build script. Either\n`npm install` or `node build -f` will do this for you. If you are going to be\nhacking on node-fibers, it may be worthwhile to first do `node-gyp configure`\nand then for subsequent rebuilds you can just do `node-gyp build` which will\nbe faster than a full `npm install` or `node-gyp rebuild`.\n\n### important!\nIt\'s recommended that you use node 0.6.18 or higher with node-fibers. Using\nother versions may lead to instability during high loads.\n\n### using windows 8?\nWindows 8 is a beta operating system and you may have issues with fibers. To use\nfibers in Windows 8 you may need to run node.exe in Windows 7 compatibility\nmode. Once Windows 8 is released this issue will be revisited. See gh-70 for\nmore information.\n\n### other notes\nUnlike most NodeJS projects, node-fibers is a C++ project. Some extra work is\nrequired to compile node-fibers, but pretty much every platform is supported\nin some way. Binary distributions in 32 and 64-bit forms are provided in npm for\nLinux, OS X, and Windows (special thanks to\n[Jeroen Janssen](https://github.com/japj) for his work on fibers in Windows).\n\nSupport for Solaris, FreeBSD, and OpenBSD is provided by compiling the extension\non your system during install time via\n[node-gyp](https://github.com/TooTallNate/node-gyp). If your operating system\nisn\'t listed here you may have luck copying the build process for one of the\nother OS\'s, assuming you are running a POSIX-like OS.\n\nnode 0.6.x is required to run this release of node-fibers. Older versions of\nnode (0.4.x) are supported in older releases of node-fibers. See the 0.5.x\nbranch of node-fibers for documentation.\n\n\nEXAMPLES\n--------\n\nThe examples below describe basic use of `Fiber`, but note that it is **not\nrecommended** to use `Fiber` without an abstraction in between your code and\nfibers. See "FUTURES" below for additional information.\n\n### Sleep\nThis is a quick example of how you can write sleep() with fibers. Note that\nwhile the sleep() call is blocking inside the fiber, node is able to handle\nother events.\n\n\t$ cat sleep.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nfunction sleep(ms) {\n\tvar fiber = Fiber.current;\n\tsetTimeout(function() {\n\t\tfiber.run();\n\t}, ms);\n\tFiber.yield();\n}\n\nFiber(function() {\n\tconsole.log(\'wait... \' + new Date);\n\tsleep(1000);\n\tconsole.log(\'ok... \' + new Date);\n}).run();\nconsole.log(\'back in main\');\n```\n\n\t$ node sleep.js\n\twait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\n\tback in main\n\tok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n\n\n### Incremental Generator\nYielding execution will resume back in the fiber right where you left off. You\ncan also pass values back and forth through yield() and run(). Again, the node\nevent loop is never blocked while this script is running.\n\n\t$ cat generator.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar inc = Fiber(function(start) {\n\tvar total = start;\n\twhile (true) {\n\t\ttotal += Fiber.yield(total);\n\t}\n});\n\nfor (var ii = inc.run(1); ii <= 10; ii = inc.run(1)) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node generator.js\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\n\n### Fibonacci Generator\nExpanding on the incremental generator above, we can create a generator which\nreturns a new Fibonacci number with each invocation. You can compare this with\nthe [ECMAScript Harmony\nGenerator](http://wiki.ecmascript.org/doku.php?id=harmony:generators) Fibonacci\nexample.\n\n\t$ cat fibonacci.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\n// Generator function. Returns a function which returns incrementing\n// Fibonacci numbers with each call.\nfunction Fibonacci() {\n\t// Create a new fiber which yields sequential Fibonacci numbers\n\tvar fiber = Fiber(function() {\n\t\tFiber.yield(0); // F(0) -> 0\n\t\tvar prev = 0, curr = 1;\n\t\twhile (true) {\n\t\t\tFiber.yield(curr);\n\t\t\tvar tmp = prev + curr;\n\t\t\tprev = curr;\n\t\t\tcurr = tmp;\n\t\t}\n\t});\n\t// Return a bound handle to `run` on this fiber\n\treturn fiber.run.bind(fiber);\n}\n\n// Initialize a new Fibonacci sequence and iterate up to 1597\nvar seq = Fibonacci();\nfor (var ii = seq(); ii <= 1597; ii = seq()) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node fibonacci.js\n\t0\n\t1\n\t1\n\t2\n\t3\n\t5\n\t8\n\t13\n\t21\n\t34\n\t55\n\t89\n\t144\n\t233\n\t377\n\t610\n\t987\n\t1597\n\n\n### Basic Exceptions\nFibers are exception-safe; exceptions will continue travelling through fiber\nboundaries:\n\n\t$ cat error.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar fn = Fiber(function() {\n\tconsole.log(\'async work here...\');\n\tFiber.yield();\n\tconsole.log(\'still working...\');\n\tFiber.yield();\n\tconsole.log(\'just a little bit more...\');\n\tFiber.yield();\n\tthrow new Error(\'oh crap!\');\n});\n\ntry {\n\twhile (true) {\n\t\tfn.run();\n\t}\n} catch(e) {\n\tconsole.log(\'safely caught that error!\');\n\tconsole.log(e.stack);\n}\nconsole.log(\'done!\');\n```\n\n\t$ node error.js\n\tasync work here...\n\tstill working...\n\tjust a little bit more...\n\tsafely caught that error!\n\tError: oh crap!\n\t\t\tat error.js:11:9\n\tdone!\n\n\nFUTURES\n-------\n\nUsing the `Fiber` class without an abstraction in between your code and the raw\nAPI is **not recommended**. `Fiber` is meant to implement the smallest amount of\nfunctionality in order make possible many different programming patterns. This\nmakes the `Fiber` class relatively lousy to work with directly, but extremely\npowerful when coupled with a decent abstraction. There is no right answer for\nwhich abstraction is right for you and your project. Included with `node-fibers`\nis an implementation of "futures" which is fiber-aware. Usage of this library\nis documented below. There are several other externally-maintained options\nwhich can be found on the [wiki](https://github.com/laverdet/node-fibers/wiki).\nYou **should** feel encouraged to be creative with fibers and build a solution\nwhich works well with your project. For instance, `Future` is not a good\nabstraction to use if you want to build a generator function (see Fibonacci\nexample above).\n\nUsing `Future` to wrap existing node functions. At no point is the node event\nloop blocked:\n\n\t$ cat ls.js\n\n```javascript\nvar Future = require(\'fibers/future\'), wait = Future.wait;\nvar fs = require(\'fs\');\n\n// This wraps existing functions assuming the last argument of the passed\n// function is a callback. The new functions created immediately return a\n// future and the future will resolve when the callback is called (which\n// happens behind the scenes).\nvar readdir = Future.wrap(fs.readdir);\nvar stat = Future.wrap(fs.stat);\n\nFiber(function() {\n\t// Get a list of files in the directory\n\tvar fileNames = readdir(\'.\').wait();\n\tconsole.log(\'Found \'+ fileNames.length+ \' files\');\n\n\t// Stat each file\n\tvar stats = [];\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tstats.push(stat(fileNames[ii]));\n\t}\n\twait(stats);\n\n\t// Print file size\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tconsole.log(fileNames[ii]+ \': \'+ stats[ii].get().size);\n\t}\n}).run();\n```\n\n\t$ node ls.js \n\tFound 11 files\n\tbin: 4096\n\tfibers.js: 1708\n\t.gitignore: 37\n\tREADME.md: 8664\n\tfuture.js: 5833\n\t.git: 4096\n\tLICENSE: 1054\n\tsrc: 4096\n\tls.js: 860\n\tMakefile: 436\n\tpackage.json: 684\n\n\nThe future API is designed to make it easy to move between classic\ncallback-style code and fiber-aware waiting code:\n\n\t$ cat sleep.js\n\n```javascript\nvar Future = require(\'fibers/future\'), wait = Future.wait;\n\n// This function returns a future which resolves after a timeout. This\n// demonstrates manually resolving futures.\nfunction sleep(ms) {\n\tvar future = new Future;\n\tsetTimeout(function() {\n\t\tfuture.return();\n\t}, ms);\n\treturn future;\n}\n\n// You can create functions which automatically run in their own fiber and\n// return futures that resolve when the fiber returns (this probably sounds\n// confusing.. just play with it to understand).\nvar calcTimerDelta = function(ms) {\n\tvar start = new Date;\n\tsleep(ms).wait();\n\treturn new Date - start;\n}.future(); // <-- important!\n\n// And futures also include node-friendly callbacks if you don\'t want to use\n// wait()\ncalcTimerDelta(2000).resolve(function(err, val) {\n\tconsole.log(\'Set timer for 2000ms, waited \'+ val+ \'ms\');\n});\n```\n\n\t$ node sleep.js\n\tSet timer for 2000ms, waited 2009ms\n\n\nAPI DOCUMENTATION\n-----------------\nFiber\'s definition looks something like this:\n\n```javascript\n/**\n * Instantiate a new Fiber. You may invoke this either as a function or as\n * a constructor; the behavior is the same.\n *\n * When run() is called on this fiber for the first time, `fn` will be\n * invoked as the first frame on a new stack. Execution will continue on\n * this new stack until `fn` returns, or Fiber.yield() is called.\n *\n * After the function returns the fiber is reset to original state and\n * may be restarted with another call to run().\n */\nfunction Fiber(fn) {\n\t[native code]\n}\n\n/**\n * `Fiber.current` will contain the currently-running Fiber. It will be\n * `undefined` if there is no fiber (i.e. the main stack of execution).\n *\n * See "Garbage Collection" for more information on responsible use of\n * `Fiber.current`.\n */\nFiber.current = undefined;\n\n/**\n * `Fiber.yield()` will halt execution of the current fiber and return control\n * back to original caller of run(). If an argument is supplied to yield(),\n * run() will return that value.\n *\n * When run() is called again, yield() will return.\n *\n * Note that this function is a global to allow for correct garbage\n * collection. This results in no loss of functionality because it is only\n * valid to yield from the currently running fiber anyway.\n *\n * Note also that `yield` is a reserved word in Javascript. This is normally\n * not an issue, however some code linters may complain. Rest assured that it\n * will run fine now and in future versions of Javascript.\n */\nFiber.yield = function(param) {\n\t[native code]\n}\n\n/**\n * run() will start execution of this Fiber, or if it is currently yielding,\n * it will resume execution. If an argument is supplied, this argument will\n * be passed to the fiber, either as the first parameter to the main\n * function [if the fiber has not been started] or as the return value of\n * yield() [if the fiber is currently yielding].\n *\n * This function will return either the parameter passed to yield(), or the\n * returned value from the fiber\'s main function.\n */\nFiber.prototype.run = function(param) {\n\t[native code]\n}\n\n/**\n * reset() will terminate a running Fiber and restore it to its original\n * state, as if it had returned execution.\n *\n * This is accomplished by causing yield() to throw an exception, and any\n * futher calls to yield() will also throw an exception. This continues\n * until the fiber has completely unwound and returns.\n *\n * If the fiber returns a value it will be returned by reset().\n *\n * If the fiber is not running, reset() will have no effect.\n */\nFiber.prototype.reset = function() {\n\t[native code]\n}\n\n/**\n * throwInto() will cause a currently yielding fiber\'s yield() call to\n * throw instead of return gracefully. This can be useful for notifying a\n * fiber that you are no longer interested in its task, and that it should\n * give up.\n *\n * Note that if the fiber does not handle the exception it will continue to\n * bubble up and throwInto() will throw the exception right back at you.\n */\nFiber.prototype.throwInto = function(exception) {\n\t[native code]\n}\n```\n\nGARBAGE COLLECTION\n------------------\n\nIf you intend to build generators, iterators, or "lazy lists", you should be\naware that all fibers must eventually unwind. This is implemented by causing\nyield() to throw unconditionally when the library is trying to unwind your\nfiber-- either because reset() was called, or all handles to the fiber were lost\nand v8 wants to delete it.\n\nSomething like this will, at some point, cause an infinite loop in your\napplication:\n\n```javascript\nvar fiber = Fiber(function() {\n\twhile (true) {\n\t\ttry {\n\t\t\tFiber.yield();\n\t\t} catch(e) {}\n\t}\n});\nfiber.run();\n```\n\nIf you either call reset() on this fiber, or the v8 garbage collector decides it\nis no longer in use, the fiber library will attempt to unwind the fiber by\ncausing all calls to yield() to throw. However, if you catch these exceptions\nand continue anyway, an infinite loop will occur.\n\nThere are other garbage collection issues that occur with misuse of fiber\nhandles. If you grab a handle to a fiber from within itself, you should make\nsure that the fiber eventually unwinds. This application will leak memory:\n\n```javascript\nvar fiber = Fiber(function() {\n\tvar that = Fiber.current;\n\tFiber.yield();\n}\nfiber.run();\nfiber = undefined;\n```\n\nThere is no way to get back into the fiber that was started, however it\'s\nimpossible for v8\'s garbage collector to detect this. With a handle to the fiber\nstill outstanding, v8 will never garbage collect it and the stack will remain in\nmemory until the application exits.\n\nThus, you should take care when grabbing references to `Fiber.current`.\n',
105 silly resolved     readmeFilename: 'README.md',
105 silly resolved     bugs: { url: 'https://github.com/laverdet/node-fibers/issues' },
105 silly resolved     _id: 'fibers@1.0.1',
105 silly resolved     _from: 'fibers@>=1.0.1' } ]
106 info install fibers@1.0.1 into C:\Aramwebsite\node_modules\wait.for
107 info installOne fibers@1.0.1
108 info C:\Aramwebsite\node_modules\wait.for\node_modules\fibers unbuild
109 verbose tar unpack C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\fibers\1.0.1\package.tgz
110 silly lockFile 609d4eb7-les-wait-for-node-modules-fibers tar://C:\Aramwebsite\node_modules\wait.for\node_modules\fibers
111 verbose lock tar://C:\Aramwebsite\node_modules\wait.for\node_modules\fibers C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\609d4eb7-les-wait-for-node-modules-fibers.lock
112 silly lockFile 9b995d98-m-cache-fibers-1-0-1-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\fibers\1.0.1\package.tgz
113 verbose lock tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\fibers\1.0.1\package.tgz C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\9b995d98-m-cache-fibers-1-0-1-package-tgz.lock
114 silly gunzTarPerm modes [ '755', '644' ]
115 silly gunzTarPerm extractEntry package.json
116 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
117 silly gunzTarPerm extractEntry .npmignore
118 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
119 silly gunzTarPerm extractEntry README.md
120 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
121 silly gunzTarPerm extractEntry LICENSE
122 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
123 silly gunzTarPerm extractEntry fibers.js
124 silly gunzTarPerm modified mode [ 'fibers.js', 438, 420 ]
125 silly gunzTarPerm extractEntry future.js
126 silly gunzTarPerm modified mode [ 'future.js', 438, 420 ]
127 silly gunzTarPerm extractEntry build.js
128 silly gunzTarPerm modified mode [ 'build.js', 438, 420 ]
129 silly gunzTarPerm extractEntry quick-test.js
130 silly gunzTarPerm modified mode [ 'quick-test.js', 438, 420 ]
131 silly gunzTarPerm extractEntry test.js
132 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
133 silly gunzTarPerm extractEntry bin/.npmignore
134 silly gunzTarPerm modified mode [ 'bin/.npmignore', 438, 420 ]
135 silly gunzTarPerm extractEntry bin/win32-x64-v8-3.6/fibers.node
136 silly gunzTarPerm modified mode [ 'bin/win32-x64-v8-3.6/fibers.node', 438, 420 ]
137 silly gunzTarPerm extractEntry bin/darwin-ia32-v8-3.6/fibers.node
138 silly gunzTarPerm modified mode [ 'bin/darwin-ia32-v8-3.6/fibers.node', 438, 420 ]
139 silly gunzTarPerm extractEntry bin/darwin-x64-v8-3.11/fibers.node
140 silly gunzTarPerm modified mode [ 'bin/darwin-x64-v8-3.11/fibers.node', 438, 420 ]
141 silly gunzTarPerm extractEntry bin/darwin-x64-v8-3.6/fibers.node
142 silly gunzTarPerm modified mode [ 'bin/darwin-x64-v8-3.6/fibers.node', 438, 420 ]
143 silly gunzTarPerm extractEntry bin/linux-ia32-v8-3.11/fibers.node
144 silly gunzTarPerm modified mode [ 'bin/linux-ia32-v8-3.11/fibers.node', 438, 420 ]
145 silly gunzTarPerm extractEntry bin/linux-ia32-v8-3.14/fibers.node
146 silly gunzTarPerm modified mode [ 'bin/linux-ia32-v8-3.14/fibers.node', 438, 420 ]
147 silly gunzTarPerm extractEntry bin/linux-ia32-v8-3.6/fibers.node
148 silly gunzTarPerm modified mode [ 'bin/linux-ia32-v8-3.6/fibers.node', 438, 420 ]
149 silly gunzTarPerm extractEntry bin/darwin-ia32-v8-3.11/fibers.node
150 silly gunzTarPerm modified mode [ 'bin/darwin-ia32-v8-3.11/fibers.node', 438, 420 ]
151 silly gunzTarPerm extractEntry bin/linux-x64-v8-3.14/fibers.node
152 silly gunzTarPerm modified mode [ 'bin/linux-x64-v8-3.14/fibers.node', 438, 420 ]
153 silly gunzTarPerm extractEntry bin/linux-x64-v8-3.6/fibers.node
154 silly gunzTarPerm modified mode [ 'bin/linux-x64-v8-3.6/fibers.node', 438, 420 ]
155 silly gunzTarPerm extractEntry bin/win32-ia32-v8-3.11/fibers.node
156 silly gunzTarPerm modified mode [ 'bin/win32-ia32-v8-3.11/fibers.node', 438, 420 ]
157 silly gunzTarPerm extractEntry bin/win32-ia32-v8-3.14/fibers.node
158 silly gunzTarPerm modified mode [ 'bin/win32-ia32-v8-3.14/fibers.node', 438, 420 ]
159 silly gunzTarPerm extractEntry bin/win32-ia32-v8-3.6/fibers.node
160 silly gunzTarPerm modified mode [ 'bin/win32-ia32-v8-3.6/fibers.node', 438, 420 ]
161 silly gunzTarPerm extractEntry bin/win32-x64-v8-3.11/fibers.node
162 silly gunzTarPerm modified mode [ 'bin/win32-x64-v8-3.11/fibers.node', 438, 420 ]
163 silly gunzTarPerm extractEntry bin/win32-x64-v8-3.14/fibers.node
164 silly gunzTarPerm modified mode [ 'bin/win32-x64-v8-3.14/fibers.node', 438, 420 ]
165 silly gunzTarPerm extractEntry bin/linux-x64-v8-3.11/fibers.node
166 silly gunzTarPerm modified mode [ 'bin/linux-x64-v8-3.11/fibers.node', 438, 420 ]
167 silly gunzTarPerm extractEntry binding.gyp
168 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]
169 silly gunzTarPerm extractEntry src/coroutine.cc
170 silly gunzTarPerm modified mode [ 'src/coroutine.cc', 438, 420 ]
171 silly gunzTarPerm extractEntry src/coroutine.h
172 silly gunzTarPerm modified mode [ 'src/coroutine.h', 438, 420 ]
173 silly gunzTarPerm extractEntry src/fibers.cc
174 silly gunzTarPerm modified mode [ 'src/fibers.cc', 438, 420 ]
175 silly gunzTarPerm extractEntry src/libcoro/README
176 silly gunzTarPerm modified mode [ 'src/libcoro/README', 438, 420 ]
177 silly gunzTarPerm extractEntry src/libcoro/LICENSE
178 silly gunzTarPerm modified mode [ 'src/libcoro/LICENSE', 438, 420 ]
179 silly gunzTarPerm extractEntry src/libcoro/conftest.c
180 silly gunzTarPerm modified mode [ 'src/libcoro/conftest.c', 438, 420 ]
181 silly gunzTarPerm extractEntry src/libcoro/coro.c
182 silly gunzTarPerm modified mode [ 'src/libcoro/coro.c', 438, 420 ]
183 silly gunzTarPerm extractEntry src/libcoro/coro.h
184 silly gunzTarPerm modified mode [ 'src/libcoro/coro.h', 438, 420 ]
185 silly gunzTarPerm extractEntry test/already-running.js
186 silly gunzTarPerm modified mode [ 'test/already-running.js', 438, 420 ]
187 silly gunzTarPerm extractEntry test/exit.js
188 silly gunzTarPerm modified mode [ 'test/exit.js', 438, 420 ]
189 silly gunzTarPerm extractEntry test/fibonacci.js
190 silly gunzTarPerm modified mode [ 'test/fibonacci.js', 438, 420 ]
191 silly gunzTarPerm extractEntry test/finish-multiple.js
192 silly gunzTarPerm modified mode [ 'test/finish-multiple.js', 438, 420 ]
193 silly gunzTarPerm extractEntry test/exec.js
194 silly gunzTarPerm modified mode [ 'test/exec.js', 438, 420 ]
195 silly gunzTarPerm extractEntry test/future.js
196 silly gunzTarPerm modified mode [ 'test/future.js', 438, 420 ]
197 silly gunzTarPerm extractEntry test/illegal-yield.js
198 silly gunzTarPerm modified mode [ 'test/illegal-yield.js', 438, 420 ]
199 silly gunzTarPerm extractEntry test/pool.js
200 silly gunzTarPerm modified mode [ 'test/pool.js', 438, 420 ]
201 silly gunzTarPerm extractEntry test/process-title.js
202 silly gunzTarPerm modified mode [ 'test/process-title.js', 438, 420 ]
203 silly gunzTarPerm extractEntry test/stack-overflow.js
204 silly gunzTarPerm modified mode [ 'test/stack-overflow.js', 438, 420 ]
205 silly gunzTarPerm extractEntry test/current.js
206 silly gunzTarPerm modified mode [ 'test/current.js', 438, 420 ]
207 silly gunzTarPerm extractEntry test/stack-overflow2.js
208 silly gunzTarPerm modified mode [ 'test/stack-overflow2.js', 438, 420 ]
209 silly gunzTarPerm extractEntry test/child-process.js
210 silly gunzTarPerm modified mode [ 'test/child-process.js', 438, 420 ]
211 silly gunzTarPerm extractEntry test/started.js
212 silly gunzTarPerm modified mode [ 'test/started.js', 438, 420 ]
213 silly gunzTarPerm extractEntry test/bad-context.js
214 silly gunzTarPerm modified mode [ 'test/bad-context.js', 438, 420 ]
215 silly gunzTarPerm extractEntry test/unwind.js
216 silly gunzTarPerm modified mode [ 'test/unwind.js', 438, 420 ]
217 silly gunzTarPerm extractEntry test/future-exception.js
218 silly gunzTarPerm modified mode [ 'test/future-exception.js', 438, 420 ]
219 silly lockFile 609d4eb7-les-wait-for-node-modules-fibers tar://C:\Aramwebsite\node_modules\wait.for\node_modules\fibers
220 silly lockFile 609d4eb7-les-wait-for-node-modules-fibers tar://C:\Aramwebsite\node_modules\wait.for\node_modules\fibers
221 silly lockFile 9b995d98-m-cache-fibers-1-0-1-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\fibers\1.0.1\package.tgz
222 silly lockFile 9b995d98-m-cache-fibers-1-0-1-package-tgz tar://C:\Documents and Settings\Administrator.PSGTECH-412BD2B\Application Data\npm-cache\fibers\1.0.1\package.tgz
223 info preinstall fibers@1.0.1
224 verbose readDependencies using package.json deps
225 verbose readDependencies using package.json deps
226 silly resolved []
227 verbose about to build C:\Aramwebsite\node_modules\wait.for\node_modules\fibers
228 info build C:\Aramwebsite\node_modules\wait.for\node_modules\fibers
229 verbose linkStuff [ false,
229 verbose linkStuff   false,
229 verbose linkStuff   false,
229 verbose linkStuff   'C:\\Aramwebsite\\node_modules\\wait.for\\node_modules' ]
230 info linkStuff fibers@1.0.1
231 verbose linkBins fibers@1.0.1
232 verbose linkMans fibers@1.0.1
233 verbose rebuildBundles fibers@1.0.1
234 info install fibers@1.0.1
235 verbose unsafe-perm in lifecycle true
236 info fibers@1.0.1 Failed to exec install script
237 info C:\Aramwebsite\node_modules\wait.for\node_modules\fibers unbuild
238 info preuninstall fibers@1.0.1
239 info uninstall fibers@1.0.1
240 verbose false,C:\Aramwebsite\node_modules,C:\Aramwebsite\node_modules\wait.for\node_modules unbuild fibers@1.0.1
241 info postuninstall fibers@1.0.1
242 verbose about to build C:\Aramwebsite\node_modules\wait.for
243 info C:\Aramwebsite\node_modules\wait.for unbuild
244 info preuninstall wait.for@0.6.3
245 info uninstall wait.for@0.6.3
246 verbose true,C:\Aramwebsite\node_modules,C:\Aramwebsite\node_modules unbuild wait.for@0.6.3
247 info postuninstall wait.for@0.6.3
248 error fibers@1.0.1 install: `node ./build.js`
248 error Exit status 1
249 error Failed at the fibers@1.0.1 install script.
249 error This is most likely a problem with the fibers package,
249 error not with npm itself.
249 error Tell the author that this fails on your system:
249 error     node ./build.js
249 error You can get their info via:
249 error     npm owner ls fibers
249 error There is likely additional logging output above.
250 error System Windows_NT 5.1.2600
251 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install"
252 error cwd C:\Aramwebsite
253 error node -v v0.10.22
254 error npm -v 1.3.14
255 error code ELIFECYCLE
256 verbose exit [ 1, true ]
